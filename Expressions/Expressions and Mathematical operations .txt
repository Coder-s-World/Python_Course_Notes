Expression 

=> Expression means which contains value (2,2, etc) as well as operator (+,-, etc) which reduced down to as single
   value ex. 2 + 2 = (4 = single value).
=> A single value with no operator is also considered as expression because it evaluate to itself.

Operators

1) Arithmetic Operators

Operator  	 Name	 
+	          Addition	   
-	          Subtraction	
*	          Multiplication	
/	          Division	         --   decimal quotient
%        	  Modulus	         --   remainder
**	          Exponentiation	 --   product
//	          Floor division	 --   integer quotient

2) Assignment Operator

Operator
Operator	 Example         Same As	
=	         x = 5	       x = 5	
+=	         x += 3	      x = x + 3	
-=	         x -= 3	      x = x - 3	
*=	         x *= 3	      x = x * 3	
/=	         x /= 3	      x = x / 3	
%=	         x %= 3	      x = x % 3	
//=	         x //=3       x = x //3
**=	         x **=3       x = x **3
&=             x &= 3         x = x & 3	
|=             x |= 3         x = x | 3	
^=	         x ^= 3         x = x ^ 3	
>>=	      x >>=3         x = x >>3	
<<=	      x <<=3         x = x <<3	
:=	        print(x := 3)   x = 3
                           print(x)

3) Comparison Operator

Operator            Name

==         ---      equal to 
!=         ---      not equal
>=         ---      greater than equal to
<=         ---      less than qual to
<          ---      less than
>          ---      greater than

4) Python Logical Operator

Operator            Description

and         ---      Returns True if both condition are True
or          ---      Returns True if any of two condition are True
not         ---      Reverse the result, returns False if the result is true    --  Ex. x = 5   print(not(x > 3 and x < 5))  output - False

5) Python Membership Operator

Operator            Description

in         ---      Returns True if specified value is present in sequence
not in     ---      Returns True if specified is value is not present in sequence

6) Bitwise Operator

Operator                 Name                                    Description
&             ---        AND                                     Sets each bit to 1 if both bits are 1
|	      ---        OR	                                 Sets each bit to 1 if one of two bits is 1		
^	      ---        XOR	                                 Sets each bit to 1 if only one of two bits is 1	
~	      ---        NOT	                                 Inverts all the bits	
<<	      ---        Zero fill left shift                    Shift left by pushing zeros in from the right and let the leftmost bits fall off	
>>	      ---        Signed right shift	                 Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off	

